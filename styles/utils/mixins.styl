/**
 * Maintain the aspect ratio
 * usage:
 *
 * @import '{PATH_TO_UTILS}/mixins'
 * .demo
 *   aspect-ratio(16, 9)
 */
aspect-ratio(width, height)
  position relative
  &:before
    display block
    content ''
    width 100%
    padding-top (height / width) * 100%

  > *
    position absolute
    top 0
    left 0
    right 0
    bottom 0

/**
 * Import a font face
 * usage:
 *
 * @import '{PATH_TO_UTILS}/mixins'
 * font-face("My Font", "/fonts/myFont/myFont-regular", 300, normal, eot woff2 woff truetype svg, "My Font", "my_font")
 */
font-face(
  font-name,
  font-src,
  font-weight = false,
  font-style = false,
  formats = woff2 truetype,
  local-font-name = font-name,
  svg-font-name = font-name
)
  @font-face
    fonts = ()
    font-family font-name
    if local
      local-name = local-font-name ? local-font-name : font-name
      push(fonts, 'local("' + local-name +'")')
    if eot in formats
      push(fonts, 'url("' + font-src + '.eot?iefix") format("emebedded-opentype")')
    if woff2 in formats
      push(fonts, 'url("' + font-src + '.woff2") format("woff2")')
    if woff in formats
      push(fonts, 'url("' + font-src + '.woff") format("woff")')
    if opentype in formats || otf in formats
      push(fonts, 'url("' + font-src + '.otf") format("opentype")')
    if truetype in formats || ttf in formats
      push(fonts, 'url("' + font-src + '.ttf") format("truetype")')
    if svg in formats
      svg-name = svg-font-name ? svg-font-name : font-name
      push(fonts, 'url("' + font-src + '.svg#' + svg-name + '") format("svg")')
    src unquote(join(", ", fonts))
    if font-weight
      font-weight font-weight
    if font-style
      font-style font-style

 /**
 * CSS triangle mixin, create any kind of triangles with ease
 * usage:
 *
 * @import '{PATH_TO_UTILS}/mixins'
 * .selector
 *   triangle(50px, 50px, 'bottom', #000)
 */
triangle(width = 10px, height = 10px, direction = 'bottom', color = #000)

  // Base triangle styles
  width 0
  height 0
  background 0
  border-style solid

  // Styles for each direction
  directions = {
    top: {
      border-width: 0 (width * .5) height (width * .5),
      border-color: transparent transparent color transparent
    },
    topRight: {
      border-width: 0 width height 0,
      border-color: transparent color transparent transparent
    },
    right: {
      border-width: (height * .5) 0 (height *.5) width,
      border-color: transparent transparent transparent color
    },
    bottomRight: {
      border-width: 0 0 height width,
      border-color: transparent transparent color transparent
    },
    bottom: {
      border-width: height (width * .5) 0 (width * .5),
      border-color: color transparent transparent transparent
    },
    bottomLeft: {
      border-width: width 0 0 height,
      border-color: transparent transparent transparent color
    },
    left: {
      border-width: (height * .5) width (height * .5) 0,
      border-color: transparent color transparent transparent
    },
    topLeft: {
      border-width: height width 0 0,
      border-color: color transparent transparent transparent
    }
  }

  // Mixin styles for passed direction
  styles = directions[direction]
  {styles}